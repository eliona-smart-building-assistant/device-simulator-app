/*
 * Device Simulator app API
 *
 * API to access and configure the Device Simulator app
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ConfigurationAPIController binds http requests to an api service and writes the service results to the http response
type ConfigurationAPIController struct {
	service      ConfigurationAPIServicer
	errorHandler ErrorHandler
}

// ConfigurationAPIOption for how the controller is set up.
type ConfigurationAPIOption func(*ConfigurationAPIController)

// WithConfigurationAPIErrorHandler inject ErrorHandler into controller
func WithConfigurationAPIErrorHandler(h ErrorHandler) ConfigurationAPIOption {
	return func(c *ConfigurationAPIController) {
		c.errorHandler = h
	}
}

// NewConfigurationAPIController creates a default api controller
func NewConfigurationAPIController(s ConfigurationAPIServicer, opts ...ConfigurationAPIOption) Router {
	controller := &ConfigurationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ConfigurationAPIController
func (c *ConfigurationAPIController) Routes() Routes {
	return Routes{
		"GeneratorsGet": Route{
			strings.ToUpper("Get"),
			"/v1/generators",
			c.GeneratorsGet,
		},
		"GeneratorsIdDelete": Route{
			strings.ToUpper("Delete"),
			"/v1/generators/{id}",
			c.GeneratorsIdDelete,
		},
		"GeneratorsIdGet": Route{
			strings.ToUpper("Get"),
			"/v1/generators/{id}",
			c.GeneratorsIdGet,
		},
		"GeneratorsIdPut": Route{
			strings.ToUpper("Put"),
			"/v1/generators/{id}",
			c.GeneratorsIdPut,
		},
		"GeneratorsPost": Route{
			strings.ToUpper("Post"),
			"/v1/generators",
			c.GeneratorsPost,
		},
	}
}

// GeneratorsGet - List all generators
func (c *ConfigurationAPIController) GeneratorsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GeneratorsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GeneratorsIdDelete - Delete a generator by ID
func (c *ConfigurationAPIController) GeneratorsIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GeneratorsIdDelete(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GeneratorsIdGet - Get a generator by ID
func (c *ConfigurationAPIController) GeneratorsIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GeneratorsIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GeneratorsIdPut - Update a generator by ID
func (c *ConfigurationAPIController) GeneratorsIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generatorParam := Generator{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generatorParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGeneratorRequired(generatorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGeneratorConstraints(generatorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GeneratorsIdPut(r.Context(), idParam, generatorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GeneratorsPost - Create a new generator
func (c *ConfigurationAPIController) GeneratorsPost(w http.ResponseWriter, r *http.Request) {
	generatorParam := Generator{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generatorParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGeneratorRequired(generatorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGeneratorConstraints(generatorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GeneratorsPost(r.Context(), generatorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
